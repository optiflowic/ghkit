package commenter

import (
	"fmt"
	"testing"

	"github.com/optiflowic/ghkit/internal/format"
	"github.com/optiflowic/ghkit/internal/source_url"
	"github.com/stretchr/testify/assert"
)

func TestPrependGeneratedComment(t *testing.T) {
	c := New()
	url := "https://example.com/template.yml"
	content := "original content"
	body := []byte(content)

	t.Run("yaml format", func(t *testing.T) {
		expected := fmt.Sprintf(
			"### Generated by ghkit (%s)\n### %s\n\n%s",
			source_url.Repository,
			url,
			content,
		)

		result := c.PrependGeneratedComment(body, format.Yaml, url)

		assert.Equal(t, expected, string(result))
	})

	t.Run("plaintext format", func(t *testing.T) {
		expected := fmt.Sprintf(
			"### Generated by ghkit (%s)\n### %s\n\n%s",
			source_url.Repository,
			url,
			content,
		)

		result := c.PrependGeneratedComment(body, format.PlaneText, url)

		assert.Equal(t, expected, string(result))
	})

	t.Run("markdown format", func(t *testing.T) {
		expected := fmt.Sprintf(
			"<!--\n  Generated by ghkit (%s)\n  %s\n-->\n\n%s",
			source_url.Repository,
			url,
			content,
		)

		result := c.PrependGeneratedComment(body, format.Markdown, url)

		assert.Equal(t, expected, string(result))
	})

	t.Run("unsupported format", func(t *testing.T) {
		result := c.PrependGeneratedComment(body, format.Format("unknown"), url)

		assert.Equal(t, body, result)
	})
}
